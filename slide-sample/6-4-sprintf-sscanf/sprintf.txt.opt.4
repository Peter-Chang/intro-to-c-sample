
sprintf：     檔案格式 mach-o-x86-64


Disassembly of section .text:

0000000100000e50 <start>:
   100000e50:	6a 00                	pushq  $0x0
   100000e52:	48 89 e5             	mov    %rsp,%rbp
   100000e55:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
   100000e59:	48 8b 7d 08          	mov    0x8(%rbp),%rdi
   100000e5d:	48 8d 75 10          	lea    0x10(%rbp),%rsi
   100000e61:	89 fa                	mov    %edi,%edx
   100000e63:	83 c2 01             	add    $0x1,%edx
   100000e66:	c1 e2 03             	shl    $0x3,%edx
   100000e69:	48 01 f2             	add    %rsi,%rdx
   100000e6c:	48 89 d1             	mov    %rdx,%rcx
   100000e6f:	eb 04                	jmp    100000e75 <start+0x25>
   100000e71:	48 83 c1 08          	add    $0x8,%rcx
   100000e75:	48 83 39 00          	cmpq   $0x0,(%rcx)
   100000e79:	75 f6                	jne    100000e71 <start+0x21>
   100000e7b:	48 83 c1 08          	add    $0x8,%rcx
   100000e7f:	e8 0c 00 00 00       	callq  100000e90 <_main>
   100000e84:	89 c7                	mov    %eax,%edi
   100000e86:	e8 81 00 00 00       	callq  100000f0c <_exit$stub>
   100000e8b:	f4                   	hlt    
   100000e8c:	90                   	nop
   100000e8d:	90                   	nop
   100000e8e:	90                   	nop
   100000e8f:	90                   	nop

0000000100000e90 <_main>:
   100000e90:	41 57                	push   %r15
   100000e92:	41 56                	push   %r14
   100000e94:	53                   	push   %rbx
   100000e95:	48 83 ec 40          	sub    $0x40,%rsp
   100000e99:	4c 8b 3d 98 01 00 00 	mov    0x198(%rip),%r15        # 100001038 <___stack_chk_guard$stub>
   100000ea0:	49 8b 07             	mov    (%r15),%rax
   100000ea3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
   100000ea8:	4c 8d 35 a1 00 00 00 	lea    0xa1(%rip),%r14        # 100000f50 <_printf$stub+0x3e>
   100000eaf:	48 8d 1c 24          	lea    (%rsp),%rbx
   100000eb3:	4c 89 f7             	mov    %r14,%rdi
   100000eb6:	48 89 de             	mov    %rbx,%rsi
   100000eb9:	30 c0                	xor    %al,%al
   100000ebb:	e8 52 00 00 00       	callq  100000f12 <_printf$stub>
   100000ec0:	48 8d 0d 94 00 00 00 	lea    0x94(%rip),%rcx        # 100000f5b <_printf$stub+0x49>
   100000ec7:	48 89 df             	mov    %rbx,%rdi
   100000eca:	31 f6                	xor    %esi,%esi
   100000ecc:	ba 32 00 00 00       	mov    $0x32,%edx
   100000ed1:	30 c0                	xor    %al,%al
   100000ed3:	e8 28 00 00 00       	callq  100000f00 <___sprintf_chk$stub>
   100000ed8:	4c 89 f7             	mov    %r14,%rdi
   100000edb:	48 89 de             	mov    %rbx,%rsi
   100000ede:	30 c0                	xor    %al,%al
   100000ee0:	e8 2d 00 00 00       	callq  100000f12 <_printf$stub>
   100000ee5:	49 8b 07             	mov    (%r15),%rax
   100000ee8:	48 3b 44 24 38       	cmp    0x38(%rsp),%rax
   100000eed:	75 0c                	jne    100000efb <_main+0x6b>
   100000eef:	31 c0                	xor    %eax,%eax
   100000ef1:	48 83 c4 40          	add    $0x40,%rsp
   100000ef5:	5b                   	pop    %rbx
   100000ef6:	41 5e                	pop    %r14
   100000ef8:	41 5f                	pop    %r15
   100000efa:	c3                   	retq   
   100000efb:	e8 06 00 00 00       	callq  100000f06 <___stack_chk_fail$stub>

Disassembly of section __TEXT.__stubs:

0000000100000f00 <___sprintf_chk$stub>:
   100000f00:	ff 25 3a 01 00 00    	jmpq   *0x13a(%rip)        # 100001040 <___sprintf_chk$stub>

0000000100000f06 <___stack_chk_fail$stub>:
   100000f06:	ff 25 3c 01 00 00    	jmpq   *0x13c(%rip)        # 100001048 <___stack_chk_fail$stub>

0000000100000f0c <_exit$stub>:
   100000f0c:	ff 25 3e 01 00 00    	jmpq   *0x13e(%rip)        # 100001050 <_exit$stub>

0000000100000f12 <_printf$stub>:
   100000f12:	ff 25 40 01 00 00    	jmpq   *0x140(%rip)        # 100001058 <_printf$stub>

Disassembly of section __TEXT.__stub_helper:

0000000100000f18 <__TEXT.__stub_helper>:
   100000f18:	68 00 00 00 00       	pushq  $0x0
   100000f1d:	e9 1e 00 00 00       	jmpq   100000f40 <_printf$stub+0x2e>
   100000f22:	68 15 00 00 00       	pushq  $0x15
   100000f27:	e9 14 00 00 00       	jmpq   100000f40 <_printf$stub+0x2e>
   100000f2c:	68 2d 00 00 00       	pushq  $0x2d
   100000f31:	e9 0a 00 00 00       	jmpq   100000f40 <_printf$stub+0x2e>
   100000f36:	68 39 00 00 00       	pushq  $0x39
   100000f3b:	e9 00 00 00 00       	jmpq   100000f40 <_printf$stub+0x2e>
   100000f40:	4c 8d 1d e9 00 00 00 	lea    0xe9(%rip),%r11        # 100001030 <>
   100000f47:	41 53                	push   %r11
   100000f49:	ff 25 d9 00 00 00    	jmpq   *0xd9(%rip)        # 100001028 <dyld_stub_binder$stub>
   100000f4f:	90                   	nop

Disassembly of section __TEXT.__unwind_info:

0000000100000f61 <__TEXT.__unwind_info>:
   100000f61:	01 00                	add    %eax,(%rax)
   100000f63:	00 00                	add    %al,(%rax)
   100000f65:	1c 00                	sbb    $0x0,%al
   100000f67:	00 00                	add    %al,(%rax)
   100000f69:	00 00                	add    %al,(%rax)
   100000f6b:	00 00                	add    %al,(%rax)
   100000f6d:	1c 00                	sbb    $0x0,%al
   100000f6f:	00 00                	add    %al,(%rax)
   100000f71:	00 00                	add    %al,(%rax)
   100000f73:	00 00                	add    %al,(%rax)
   100000f75:	1c 00                	sbb    $0x0,%al
   100000f77:	00 00                	add    %al,(%rax)
   100000f79:	02 00                	add    (%rax),%al
   100000f7b:	00 00                	add    %al,(%rax)
   100000f7d:	50                   	push   %rax
   100000f7e:	0e                   	(bad)  
   100000f7f:	00 00                	add    %al,(%rax)
   100000f81:	34 00                	xor    $0x0,%al
   100000f83:	00 00                	add    %al,(%rax)
   100000f85:	34 00                	xor    $0x0,%al
   100000f87:	00 00                	add    %al,(%rax)
   100000f89:	01 0f                	add    %ecx,(%rdi)
   100000f8b:	00 00                	add    %al,(%rax)
   100000f8d:	00 00                	add    %al,(%rax)
   100000f8f:	00 00                	add    %al,(%rax)
   100000f91:	34 00                	xor    $0x0,%al
   100000f93:	00 00                	add    %al,(%rax)
   100000f95:	03 00                	add    (%rax),%eax
   100000f97:	00 00                	add    %al,(%rax)
   100000f99:	0c 00                	or     $0x0,%al
   100000f9b:	02 00                	add    (%rax),%al
   100000f9d:	14 00                	adc    $0x0,%al
   100000f9f:	02 00                	add    (%rax),%al
   100000fa1:	00 00                	add    %al,(%rax)
   100000fa3:	00 01                	add    %al,(%rcx)
   100000fa5:	40 00 00             	add    %al,(%rax)
   100000fa8:	00 0a                	add    %cl,(%rdx)
   100000faa:	0c 0c                	or     $0xc,%al
   100000fac:	02 00                	add    (%rax),%al
   100000fae:	00 00                	add    %al,(%rax)
	...
